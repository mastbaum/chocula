#!/usr/bin/env python

import sys
import argparse
import multiprocessing
from chocula import loader
from chocula import rootutils
from chocula import counting

# Scaling from sigma to HWHM
HHS = 2.35482 / 2

# Mappings from Gaussian mean and sigma to various ROI definitions
ROIS = {
    'fwhm': (lambda (m, s): (m - HHS * s, m + HHS * s)),
    'hwhm': (lambda (m, s): (m, m + HHS * s)),
    'full': (lambda (m, s): (m - s, m + s)),
    'upper': (lambda (m, s): (m, m + s)),
    'm05p15': (lambda (m, s): (m - 0.5 * s, m + 1.5 * s)),
}

def _make_cuts(args, signal):
    '''Build the ROI cut based on command-line arguments.

    :param args: Arguments, as parsed by the ArgumentParser
    :param signal: The Signal representing the actual signal
    :returns: A TCut expressing the cuts
    '''
    roi_cut_kwargs = {
        'evIndex': 0,
        'radius': (0, args.radius),
        args.fitter: True,
    }
    cut = rootutils.build_tcut(**roi_cut_kwargs)

    # Fit for the energy if it's not explicitly specified
    if ':' in args.energy:
        energy = map(float, args.energy.split(':'))
    else:
        energy = ROIS[args.energy](rootutils.get_energy_roi(signal, cut))

    roi_cut_kwargs['energy'] = energy
    cut = rootutils.build_tcut(**roi_cut_kwargs)

    return cut


if __name__ == '__main__':
    rootutils.setup_environment()

    # Handle command-line arguments
    parser = argparse.ArgumentParser(description='Counting experiment')
    parser.add_argument('--radius', '-r', type=float, default=3500.0,
                        help='Fiducial volume radius cut (mm)')
    parser.add_argument('--energy', '-e', default='upper',
                        help='Energy ROI as type or explicit "low:high"')
    parser.add_argument('--fitter', '-f', default='scintFit',
                        help='Vertex fitter')
    parser.add_argument('--processes', '-p', type=int,
                        default=multiprocessing.cpu_count(),
                        help='Number of parallel proceses')
    parser.add_argument('--output', '-o',
                        help='Output CSV filename for counts')
    parser.add_argument('table', help='Filename of background table')
    args = parser.parse_args()

    # Load the CSV background table the ROOT datasets
    signals = loader.load(args.table, args.processes)

    # Set up the cuts
    signal_signal = filter(lambda x: x.chain == 'S', signals)[0]
    cut = _make_cuts(args, signal_signal)
    print '== Cut ======'
    print cut

    # Count 'em
    count = counting.count(signals, cut)

    # Output the results
    print '== Results =='
    max_name_length = max(map(lambda x: len(x.name), signals))
    for k, v in count:
        print ('{:%is} {:4.3f}' % max_name_length).format(k, v)

    if args.output is not None:
        with open(args.output, 'w') as f:
            for signal in count:
                f.write('%s,%1.3f\n' % signal)

